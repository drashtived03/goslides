Golang Basics
21 July 2019
Tags: go golang 

Drashti Ved

* Agenda
- Strings
- Struct
- Defer, Panic and Recover
- Timer and Ticker

* Strings in Go

Strings are UTF-8 encoded 
.play string/stringEncoding/main.go /^func main/,/^}/

* Strings cont...
.play string/stringUnicode/main.go /^func main/,/^}/

* Rune
.play string/rune/main.go /^func main/,/^}/

* Rune cont...
.play string/runeIteration/main.go /^func main/,/^}/
Any valid UTF-8 character within a single quote (') is a rune and it’s type is int32.
.play string/runeValue/main.go /^func main/,/^}/

* Strings are immutable
If we try to replace any byte in the slice, the compiler will throw an error.
.play string/stringImmutable/main.go /^func main/,/^}/

* String Functions
.play string/stringFunction/main.go /^var p/,/^}/

* Struct
A structure has different fields of the same or different type.  A struct is used mainly when you need to define a schema type made of different individual fields (properties). Like ross is a type of Employee (struct) which has firstName, LastName, salary and fullTime status (schema fields).

In following example, Employee is struct type while ross is struct, while struct is a built-in type.    
.play struct/createStruct/main.go
Employee is struct type while ross is struct, while struct is a built-in type.  

* Struct Fields
When a struct is defined, using . (dot) notation, you can access struct fields with syntax struct.field.
.play struct/accessFields/main.go /^func main/,/^}/

Initialize struct
.play struct/initializeStruct/main.go /^func main/,/^}/

* Anonymous struct
An anonymous struct is a struct with no explicitly defined struct type alias. This is useful when you don’t want to re-use a struct type.

.play struct/anonymousStruct/main.go /^func main/,/^}/

* Pointer to struct
Instead of creating a struct, we can create a pointer which points to the struct in one statement. This saves one step to create a struct (variable) and then create a pointer to that variable.
.play struct/pointer/main.go /^func main/,/^}/

In the above program, since ross is a pointer, we need to use *ross to get actual value and use (*ross).firstName to access firstName so that compiler doesn’t get confused between (*ross).firstName and *(ross.firstName). But Go provide another syntax to access fields like in case of array pointer. Without using *, we can use directly pointer to access fields.

* Nested Struct and Anonymous Field
.play struct/nestedStruct/main.go /^type/,/^//End/

* Functions as Struct fields
Struct fields can also be functions.
.play struct/functionFields/main.go /^type/,/^//End/

* Comparing structs
Two structs are comparable if they belong to the same type and have the same field values. If a struct has field type which is not comparable, for example, map which is not comparable, then the struct won’t be comparable. 
.play struct/compareStruct/main.go /^func main/,/^//End/

* Meta data
Used to provide transformation info on how a struct field is encoded to or decoded from another format (or stored/retrieved from a database)

 type Employee struct {
 	firstName string `json:"firstName"`
 	lastName  string `json:"lastName"`
 	salary    int    `json: "salary"`
 	fullTime  int    `json: "fullTime"`
 }

* Panic
.play deferpanicrecover/panicFunc/main.go

* Panic cont..
When a panic occurs, no further statements are executed and Go starts unwinding the stack by calling each pending statement in the stack until the last statement which was called from the main function.

The panic function can receive any type of argument as its signature looks like below, and we know an empty interface type represents all the values.

 panic(interface{})

* Defer
.play deferpanicrecover/defer/main.go /^func/,/^} //End/

* Recover
.play deferpanicrecover/recover/main.go

* Recover cont...
.play deferpanicrecover/recoverFail/main.go /^func/,/^} //End/

* Recover cont...
.play deferpanicrecover/returnValueFromRecover/main.go /^func/,/^} //End/

* Timer	
.play timer/main.go /^func main/,/^}/

* Ticker	
.play ticker/main.go /^func main/,/^}/

* Reference
.link https://medium.com/rungo/go-introductory-tutorials-896aeda0fb8a
.link https://gobyexample.com/







 





